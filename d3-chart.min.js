/*d3-chart.js v1.0.0 Copyright 2021 m.k.  MIT License*/!function (t) { "use strict"; function i() { if (!arguments || 0 == arguments.length) return {}; for (var t = arguments[0] || {}, o = 1; o < arguments.length; o++) for (var e in arguments[o]) arguments[o].hasOwnProperty(e) && ("[object Object]" === Object.prototype.toString.call(arguments[o][e]) ? t[e] = i(t[e], arguments[o][e]) : t[e] = arguments[o][e]); return t } function o(t) { return void 0 === t || null == t } t || (t = "undefined" != typeof self && self ? self : window); var e = { id: void 0, values: [], title: "", type: void 0, step: void 0, sorted: void 0, xScaleNo: 1, yScaleNo: 1 }, n = { show: !0, min: void 0, max: void 0, sorted: !1, padding: void 0, label: void 0, format: void 0, tickSize: void 0, position: void 0, scalePosition: void 0 }, s = { show: !1, step: void 0 }, r = { size: 4, className: void 0 }; t.D3ChartDefaultOptions = { bindto: void 0, data: void 0, size: { width: void 0, height: void 0 }, type: "line", step: void 0, axis: { y: i({}, n, { position: "left" }), y2: i({}, n, { show: !1, position: "right" }), x: i({}, n, { position: "bottom" }), x2: i({}, n, { show: !1, position: "top" }) }, grid: { x: s, y: s }, padding: { top: 20, left: 40, bottom: 40, right: 20 }, tooltip: { show: !1, format: function (t, i, o, e) { return "x:" + t + " y:" + i } }, point: { show: !1, style: r, hoverStyle: r }, autoResize: !0 }, t.D3Chart = function (t) { const n = this; function s() { if ("string" == typeof n.options.bindto) { var t = n.options.bindto; n.options.bindto = { body: t, x: t, y: t, x2: t, y2: t } } o(n.options.bindto.x) && (n.options.bindto.x = n.options.bindto.body), o(n.options.bindto.x2) && (n.options.bindto.x2 = n.options.bindto.body), o(n.options.bindto.y) && (n.options.bindto.y = n.options.bindto.body), o(n.options.bindto.y2) && (n.options.bindto.y2 = n.options.bindto.body), n.options.data || (n.options.data = []); for (var s = 0; s < n.options.data.length; s++) n.options.data[s] = i({}, e, n.options.data[s]); window.removeEventListener("resize", u), n.options.autoResize && window.addEventListener("resize", u) } function r(t) { var i = (t = t || n.options).bindto.body, e = t.size.width, s = t.size.height, r = d3.select(i).node(); return o(e) && (e = r.clientWidth), o(s) && (s = r.clientHeight), t.size.margin && (0 == o(t.size.margin.x) && (e -= t.size.margin.x), 0 == o(t.size.margin.y) && (s -= t.size.margin.y)), { width: e, height: s } } function d(t, i) { return 0 == o(t) ? t : "function" == typeof i ? i() : i } function c(t, i, o) { return { min: d(t.min, function () { return function (i, o) { for (var e = void 0, n = 0; n < i.length; n++) { var s = i[n], r = s.values; if (0 != r.length) { var a = r[0], d = t.sorted || s.sorted && s.sorted[o] ? a[o] : d3.min(r, function (t) { return t[o] }); (void 0 === e || e > d) && (e = d) } } return e }(i, o) }), max: d(t.max, function () { return function (i, o) { for (var e = void 0, n = 0; n < i.length; n++) { var s = i[n], r = Array.isArray(s) ? s : s.values; if (0 != r.length) { var a = r[r.length - 1], d = t.sorted || s.sorted && s.sorted[o] ? a[o] : d3.max(r, function (t) { return t[o] }); (void 0 === e || d > e) && (e = d) } } return e }(i, o) }) } } function p(t, i, o) { var e = d3.select(t); return e.select("svg").remove(), e.append("svg").attr("width", i).attr("height", o).attr("style", "overflow:hidden;") } function l() { var t = n.options, i = t.bindto.body, e = t.padding, s = r(), a = s.width, d = s.height; n.containers = {}, n.width = a, n.height = d, n.containers.body = d3.select(i); var l = p(i, a, d); if (t.tooltip.show && !n.containers.tooltip && (n.containers.tooltip = d3.select("body").append("div").attr("class", "d3chart-tooltip")), i != t.bindto.x && 0 == o(t.bindto.x)) { var u = "top" == t.axis.x.position ? e.top : "bottom" == t.axis.x.position ? e.bottom : 0; p(t.bindto.x, a, u + 1) } if (i != t.bindto.x2 && 0 == o(t.bindto.x2)) { u = "top" == t.axis.x2.position ? e.top : "bottom" == t.axis.x2.position ? e.bottom : 0; p(t.bindto.x2, a, u + 1) } if (i != t.bindto.y && 0 == o(t.bindto.y)) { var v = "left" == t.axis.y.position ? e.left : "right" == t.axis.y.position ? e.right : 0; p(t.bindto.y, v + 1, d) } if (i != t.bindto.y2 && 0 == o(t.bindto.y2)) { v = "left" == t.axis.y2.position ? e.left : "right" == t.axis.y2.position ? e.right : 0; p(t.bindto.y2, v + 1, d) } var y = c(t.axis.x, t.data, 0), g = c(t.axis.y, t.data, 1); n.gridX = function (t, i) { var o = n.options.padding, e = n.containers.body.select("svg").append("g"), s = (n.width - o.left - o.right) / (i.max - i.min) * t.step; if (t.show) { var r = d3.range(o.left + s, n.width - o.right + s, s); e.selectAll("line.d3chart-gridx-line").data(r).enter().append("line").attr("x1", function (t, i) { return t + 0 }).attr("y1", o.top).attr("x2", function (t, i) { return t + 0 }).attr("y2", n.height - o.bottom), e.selectAll("line").attr("stroke", "black").classed("d3chart-grid-line", !0).attr("shape-rendering", "crispEdges"), e.classed("d3chart-grid", !0).classed("d3chart-gridx", !0) } return e }(t.grid.x, y), n.gridY = function (t, i) { if (!t.show) return {}; var o = n.options.padding, e = n.containers.body.select("svg").append("g"), s = (n.height - o.top - o.bottom) / (i.max - i.min) * t.step; if (t.show) { var r = d3.range(n.height - o.bottom - s, o.top, -s), a = s - o.top % s - 3; e.selectAll("line.d3chart-gridy-line").data(r).enter().append("line").attr("x1", o.left).attr("y1", function (t, i) { return t + a }).attr("x2", n.width - o.right).attr("y2", function (t, i) { return t + a }), e.selectAll("line").attr("stroke", "black").classed("d3chart-grid-line", !0).attr("shape-rendering", "crispEdges"), e.classed("d3chart-grid", !0).classed("d3chart-gridy", !0) } return e }(t.grid.y, g), n.scaleX = d3.scaleLinear().domain([y.min, y.max]).range([e.left, a - e.right]), n.scaleY = d3.scaleLinear().domain([g.min, g.max]).range([d - e.bottom, e.top]), n.axisX = f(t.bindto.x, t.axis.x, n.scaleX, y, "d3chart-axisx"), n.axisX2 = f(t.bindto.x2, t.axis.x2, n.scaleX, y, "d3chart-axisx2"), n.axisY = f(t.bindto.y, t.axis.y, n.scaleY, g, "d3chart-axisy"), n.axisY2 = f(t.bindto.y2, t.axis.y2, n.scaleY, g, "d3chart-axisy2"), n.charts = l.append("g"), n.charts.classed("d3chart-chart", !0), n.points = l.append("g"), n.points.classed("d3chart-point", !0); for (var x = 0; x < t.data.length; x++) { var b = t.data[x], m = (b.type || n.options.type, h(b)); m && m.render() } } function h(t) { switch (t.type || n.options.type) { case "scale": return } return new a(n, t) } function f(t, i, e, s, r) { if (!i.show) return {}; const a = n.options.padding, d = d3.select(t).select("svg").append("g"); var c, p = 0, l = 0; switch (i.scalePosition || i.position) { case "top": c = d3.axisTop(e); break; case "bottom": c = d3.axisBottom(e); break; case "left": c = d3.axisLeft(e); break; case "right": c = d3.axisRight(e) } switch (i.position) { case "top": l = a.top; break; case "bottom": l = n.height - a.bottom; break; case "left": p = a.left; break; case "right": p = n.width - a.right } var h = i.values, f = void 0; if (i.step || i.tick) { if (f = [], h = [], o(i.step) && (i.step = i.tick), o(i.tick) && (i.tick = i.step), 0 == o(i.step)) { var u = Math.ceil(s.min / i.step) * i.step; if ((y = Math.floor(s.max / i.step) * i.step) > u) for (var v = u; v <= y; v += i.step) h.push(v), f.push(v); else for (v = u; v >= y; v -= i.step) h.push(v), f.push(v) } if (0 == o(i.tick)) { var y; u = Math.ceil(s.min / i.tick) * i.tick; if ((y = Math.floor(s.max / i.tick) * i.tick) > u) for (v = u; v <= y; v += i.tick) -1 == h.indexOf(v) && h.push(v); else for (v = u; v >= y; v -= i.tick) -1 == h.indexOf(v) && h.push(v) } h = h.sort(function (t, i) { return t - i }) } 0 == o(h) ? c.tickValues(h).tickFormat(function (t) { return -1 == f.indexOf(t) ? "" : i.format ? i.format(t) : t }) : c.tickFormat(i.format), d.classed("d3chart-axis", !0).classed(r, !0).attr("transform", "translate(" + p + "," + l + ")").call(c), i.tickSize && d.selectAll("g.tick line").attr("y2", function (t) { return "number" == typeof i.tickSize ? i.tickSize : "function" == typeof i.tickSize ? i.tickSize(t) : -1 == f.indexOf(t) ? i.tickSize.tick : i.tickSize.step }) } function u() { var t = r(); t.width == n.width && t.height == n.height || l() } !function (t) { n.options = i({}, D3ChartDefaultOptions, t), s() }(t), l(), n.render = l, n.update = function (t, o) { "object" == typeof n.options[t] && 0 == Array.isArray(n.options[t]) ? n.options[t] = i({}, n.options[t], o) : n.options[t] = o; s(), n.renderEnabled && l() }, n.beginUpdate = function () { n.renderEnabled = !1 }, n.endUpdate = function (t) { n.renderEnabled = !0, (t || o(t)) && (l(), n.needRender = !1) }, n.renderEnabled = !0 }; var a = function (t, i) { const e = this; this.parent = t, this.options = t.options, this.data = i, this.render = function () { const t = e.options, i = e.parent, n = e.data; i.charts.append("path").datum(n.values).classed("d3chart-chart-line", !0).attr("stroke", "black").attr("d", d3.line().curve(function (t, i) { o(t) && (t = e.options.type); o(i) && (i = e.options.step); switch (t) { case "spline": return d3.curveCatmullRom; case "step": if (i) switch (i.type) { case "step-before": return d3.curveStepBefore; case "step-after": return d3.curveStepAfter } return d3.curveStep } return d3.curveLinear }(n.type, n.step)).x(function (t) { return i.scaleX(t[0]) }).y(function (t) { return i.scaleY(t[1]) })); if (t.point && t.point.show || t.tooltip && t.tooltip.show) { var s = i.points.append("g").selectAll("circle").data(n.values).enter().append("circle").attr("cx", function (t) { return i.scaleX(t[0]) }).attr("cy", function (t) { return i.scaleY(t[1]) }).classed("d3chart-point-circle", !0).on("mouseover", function (o, e, n) { var s = d3.select(n[e]); if (t.point && t.point.show && (s.attr("r", t.point.hoverStyle.size), t.point.hoverStyle.className && s.classed(t.point.hoverStyle.className, !0)), t.tooltip && t.tooltip.show) { var r = t.tooltip.format(o[0], o[1], e, t); i.containers.tooltip.style("visibility", "visible").html(r) } }).on("mousemove", function (o, e, n) { t.tooltip && t.tooltip.show && i.containers.tooltip.style("top", d3.event.pageY - 20 + "px").style("left", d3.event.pageX + 10 + "px") }).on("mouseout", function (o, e, n) { var s = d3.select(n[e]); t.point && t.point.show && (s.attr("r", t.point.style.size), t.point.hoverStyle.className && s.classed(t.point.hoverStyle.className, !1)), t.tooltip && t.tooltip.show && i.containers.tooltip.style("visibility", "hidden") }); t.point && t.point.show ? s.attr("r", t.point.style.size) : s.attr("r", 4).classed("d3chart-point-circle-hidden", !0) } } } }(this);